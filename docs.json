{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"git@github.com:tremho/gen-format.git","branch_name":"docwork","objects":[{"comment":"/**\n* Error thrown for an invalid value passed to the date formatter.\n*\n* This may be due to a string that fails to parse, a non-Date object instance,\n* an Invalid Date instance, or not a Date or a string.\n*\n* @param message\n* @constructor\n*/","meta":{"range":[2726,3119],"filename":"DateFormatter.js","lineno":61,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100000153","name":"BadDateValue","type":"FunctionDeclaration","paramnames":["message"]},"vars":{"BadDateValue":"BadDateValue~BadDateValue","":null}},"description":"Error thrown for an invalid value passed to the date formatter.\n\nThis may be due to a string that fails to parse, a non-Date object instance,\nan Invalid Date instance, or not a Date or a string.","params":[{"name":"message"}],"kind":"class","name":"BadDateValue","longname":"BadDateValue","scope":"global"},{"comment":"/**\n* Picks from the timezone list.\n* Note: probably unnecessary at this point; it is already\n* somewhat redundant to findTimezone.\n* @param tz\n* @param entries\n*\n* @private\n*/","meta":{"range":[28073,28879],"filename":"DateFormatter.js","lineno":713,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100003548","name":"pickTimezone","type":"FunctionDeclaration","paramnames":["tz","entries"]},"vars":{"i":"pickTimezone~i","tze":"pickTimezone~tze","tzu":"pickTimezone~tzu","tzl":"pickTimezone~tzl","anchor":"pickTimezone~anchor","city":"pickTimezone~city","sabbr":"pickTimezone~sabbr","dabbr":"pickTimezone~dabbr"}},"description":"Picks from the timezone list.\nNote: probably unnecessary at this point; it is already\nsomewhat redundant to findTimezone.","params":[{"name":"tz"},{"name":"entries"}],"access":"private","name":"pickTimezone","longname":"pickTimezone","kind":"function","scope":"global"},{"comment":"/**\n* Adjust the current time by interval of years\n* @param v\n*\n* @private\n*/","meta":{"range":[28963,29269],"filename":"DateFormatter.js","lineno":741,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100003695","name":"yearMark","type":"FunctionDeclaration","paramnames":["v","midnight","top"]},"vars":{"top":"yearMark~top","dt":"yearMark~dt"}},"description":"Adjust the current time by interval of years","params":[{"name":"v"}],"access":"private","name":"yearMark","longname":"yearMark","kind":"function","scope":"global"},{"comment":"/**\n* Adjust the current time by interval of months\n* where (n) is the month relative to current month.\n* by setting to the current date in month (n).\n* If the current date in month (n) is invalid,\n* set the date to 4 weeks ahead/back from the current date instead\n* (per setDate)\n* @param v\n*\n* @private\n*/","meta":{"range":[29588,30171],"filename":"DateFormatter.js","lineno":764,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100003758","name":"monthMark","type":"FunctionDeclaration","paramnames":["v","midnight","top"]},"vars":{"top":"monthMark~top","dt":"monthMark~dt","curMo":"monthMark~curMo","newMo":"monthMark~newMo","date":"monthMark~date","yo":"monthMark~yo"}},"description":"Adjust the current time by interval of months\nwhere (n) is the month relative to current month.\nby setting to the current date in month (n).\nIf the current date in month (n) is invalid,\nset the date to 4 weeks ahead/back from the current date instead\n(per setDate)","params":[{"name":"v"}],"access":"private","name":"monthMark","longname":"monthMark","kind":"function","scope":"global"},{"comment":"/**\n* Adjust date/time by a relative number of weeks\n* @param v\n*\n* @private\n*/","meta":{"range":[30257,30650],"filename":"DateFormatter.js","lineno":789,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100003872","name":"weekMark","type":"FunctionDeclaration","paramnames":["v","midnight","top"]},"vars":{"top":"weekMark~top","dt":"weekMark~dt","date":"weekMark~date","wd":"weekMark~wd"}},"description":"Adjust date/time by a relative number of weeks","params":[{"name":"v"}],"access":"private","name":"weekMark","longname":"weekMark","kind":"function","scope":"global"},{"comment":"/**\n* Adjust date/time by a relative number of days\n* @param v\n*\n* @private\n*/","meta":{"range":[30735,31006],"filename":"DateFormatter.js","lineno":808,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100003940","name":"dayMark","type":"FunctionDeclaration","paramnames":["v","midnight"]},"vars":{"dt":"dayMark~dt","date":"dayMark~date"}},"description":"Adjust date/time by a relative number of days","params":[{"name":"v"}],"access":"private","name":"dayMark","longname":"dayMark","kind":"function","scope":"global"},{"comment":"/**\n* set time to top of current hour\n* @param v\n*\n* @private\n*/","meta":{"range":[31077,31215],"filename":"DateFormatter.js","lineno":822,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100003981","name":"hourMark","type":"FunctionDeclaration","paramnames":["v"]},"vars":{"dt":"hourMark~dt","hr":"hourMark~hr"}},"description":"set time to top of current hour","params":[{"name":"v"}],"access":"private","name":"hourMark","longname":"hourMark","kind":"function","scope":"global"},{"comment":"/**\n* set time to top of current minute\n* @param v\n*\n* @private\n*/","meta":{"range":[31288,31462],"filename":"DateFormatter.js","lineno":834,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100004011","name":"minuteMark","type":"FunctionDeclaration","paramnames":["v"]},"vars":{"dt":"minuteMark~dt","hr":"minuteMark~hr","mn":"minuteMark~mn"}},"description":"set time to top of current minute","params":[{"name":"v"}],"access":"private","name":"minuteMark","longname":"minuteMark","kind":"function","scope":"global"},{"comment":"/**\n* set time to top of current second\n* @param v\n*\n* @private\n*/","meta":{"range":[31535,31743],"filename":"DateFormatter.js","lineno":847,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100004048","name":"secondMark","type":"FunctionDeclaration","paramnames":["v"]},"vars":{"dt":"secondMark~dt","hr":"secondMark~hr","mn":"secondMark~mn","sc":"secondMark~sc"}},"description":"set time to top of current second","params":[{"name":"v"}],"access":"private","name":"secondMark","longname":"secondMark","kind":"function","scope":"global"},{"comment":"/**\n* Parse the string for @ hh:mm:ss.sss am/pm time specifier\n* and return the time offset (milliseconds) from midnight this time represents\n*\n* no time spec results in the current time offset from midnight\n*\n* @param str\n*\n* @private\n*/","meta":{"range":[31992,33390],"filename":"DateFormatter.js","lineno":865,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100004092","name":"parseTimeArg","type":"FunctionDeclaration","paramnames":["str"]},"vars":{"hr":"parseTimeArg~hr","mn":"parseTimeArg~mn","sn":"parseTimeArg~sn","isAm":"parseTimeArg~isAm","isPm":"parseTimeArg~isPm","timeset":"parseTimeArg~timeset","pi":"parseTimeArg~pi","tmstr":"parseTimeArg~tmstr","ai":"parseTimeArg~ai","se":"parseTimeArg~se","hi":"parseTimeArg~hi","hs":"parseTimeArg~hs","mi":"parseTimeArg~mi","ms":"parseTimeArg~ms","ss":"parseTimeArg~ss"}},"description":"Parse the string for @ hh:mm:ss.sss am/pm time specifier\nand return the time offset (milliseconds) from midnight this time represents\n\nno time spec results in the current time offset from midnight","params":[{"name":"str"}],"access":"private","name":"parseTimeArg","longname":"parseTimeArg","kind":"function","scope":"global"},{"comment":"/**\n* Find the referenced weekday in a string such as 'last Tuesday' or 'next Th'\n* @param str\n*\n* @private\n*/","meta":{"range":[33507,34149],"filename":"DateFormatter.js","lineno":916,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100004341","name":"findWeekdayName","type":"FunctionDeclaration","paramnames":["str"]},"vars":{"si":"findWeekdayName~si","se":"findWeekdayName~se","wkdName":"findWeekdayName~wkdName","i":"findWeekdayName~i","fn":"findWeekdayName~fn","a1":"findWeekdayName~a1","a2":"findWeekdayName~a2","a3":"findWeekdayName~a3"}},"description":"Find the referenced weekday in a string such as 'last Tuesday' or 'next Th'","params":[{"name":"str"}],"access":"private","name":"findWeekdayName","longname":"findWeekdayName","kind":"function","scope":"global"},{"comment":"/**\n* Move to the last occurrence of the given weekday prior to the current day\n* @param wd\n* @param midnight\n*\n* @private\n*/","meta":{"range":[34282,34633],"filename":"DateFormatter.js","lineno":941,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100004462","name":"lastWeekday","type":"FunctionDeclaration","paramnames":["wd","midnight"]},"vars":{"ndt":"lastWeekday~ndt","nwd":"lastWeekday~nwd","wm":"lastWeekday~wm","dt":"lastWeekday~dt"}},"description":"Move to the last occurrence of the given weekday prior to the current day","params":[{"name":"wd"},{"name":"midnight"}],"access":"private","name":"lastWeekday","longname":"lastWeekday","kind":"function","scope":"global"},{"comment":"/**\n* Move forward to the next occurrence of the given weekday\n* @param wd\n* @param midnight\n*\n* @private\n*/","meta":{"range":[34749,35099],"filename":"DateFormatter.js","lineno":959,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100004519","name":"nextWeekday","type":"FunctionDeclaration","paramnames":["wd","midnight"]},"vars":{"ndt":"nextWeekday~ndt","nwd":"nextWeekday~nwd","wm":"nextWeekday~wm","dt":"nextWeekday~dt"}},"description":"Move forward to the next occurrence of the given weekday","params":[{"name":"wd"},{"name":"midnight"}],"access":"private","name":"nextWeekday","longname":"nextWeekday","kind":"function","scope":"global"},{"comment":"/**\n* move forward or back to to named weekday within the current week\n* @param wd\n* @param midnight\n*\n* @private\n*/","meta":{"range":[35223,35456],"filename":"DateFormatter.js","lineno":977,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100004575","name":"thisWeekday","type":"FunctionDeclaration","paramnames":["wd","midnight"]},"vars":{"dt":"thisWeekday~dt"}},"description":"move forward or back to to named weekday within the current week","params":[{"name":"wd"},{"name":"midnight"}],"access":"private","name":"thisWeekday","longname":"thisWeekday","kind":"function","scope":"global"},{"comment":"/**\n* Break down the interval into a DurationParts object that describes the span in graduated unite of time.\n* @param ms\n*\n* @private\n*/","meta":{"range":[9319,10540],"filename":"DateRangeFormatter.js","lineno":233,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100005741","name":"getDurationParts","type":"FunctionDeclaration","paramnames":["ms"]},"vars":{"out":"getDurationParts~out","msPerSec":"getDurationParts~msPerSec","secPerMin":"getDurationParts~secPerMin","minPerHr":"getDurationParts~minPerHr","hrsPerDay":"getDurationParts~hrsPerDay","dayPerWeek":"getDurationParts~dayPerWeek","weeksPerMonth":"getDurationParts~weeksPerMonth","monthsPerYear":"getDurationParts~monthsPerYear","out.sign":"getDurationParts~out.sign","ms":"getDurationParts~ms","out.totalms":"getDurationParts~out.totalms","out.seconds":"getDurationParts~out.seconds","out.minutes":"getDurationParts~out.minutes","out.hours":"getDurationParts~out.hours","out.days":"getDurationParts~out.days","out.weeks":"getDurationParts~out.weeks","out.months":"getDurationParts~out.months","out.years":"getDurationParts~out.years","out.milliseconds":"getDurationParts~out.milliseconds"}},"description":"Break down the interval into a DurationParts object that describes the span in graduated unite of time.","params":[{"name":"ms"}],"access":"private","name":"getDurationParts","longname":"getDurationParts","kind":"function","scope":"global"},{"comment":"/**\n* Break down the parts and structure a duration display in the proper semantics\n* based on the options.  Use Intl where appropriate; format our own where not.\n*\n* @param dparts\n* @param locale\n* @param specParts\n* @param isHuman\n* @param relStyle\n*\n* @private\n*/","meta":{"range":[10819,14368],"filename":"DateRangeFormatter.js","lineno":273,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100006004","name":"fitRelativeTime","type":"FunctionDeclaration","paramnames":["dparts","locale","specParts","isHuman","relStyle"]},"vars":{"out":"fitRelativeTime~out","express":"fitRelativeTime~express","":null,"out_1":"fitRelativeTime~out_1","sec":"fitRelativeTime~sec","opts":"fitRelativeTime~opts","rtf":"fitRelativeTime~rtf","type":"fitRelativeTime~type","value":"fitRelativeTime~value"}},"description":"Break down the parts and structure a duration display in the proper semantics\nbased on the options.  Use Intl where appropriate; format our own where not.","params":[{"name":"dparts"},{"name":"locale"},{"name":"specParts"},{"name":"isHuman"},{"name":"relStyle"}],"access":"private","name":"fitRelativeTime","longname":"fitRelativeTime","kind":"function","scope":"global"},{"comment":"/**\n* Support for the `formatV` operation.\n*\n* Parses the format template into parsed items\n*\n* new format form is \"literal $(fmt) or $2(fmt) or $name(fmt)\"\n*\n* @private\n*/","meta":{"range":[457,2528],"filename":"TemplateFormatter.js","lineno":21,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100007602","name":"parseFormat","type":"FunctionDeclaration","paramnames":["fmt"]},"vars":{"parsedItems":"parseFormat~parsedItems","natOrder":"parseFormat~natOrder","pi":"parseFormat~pi","ps":"parseFormat~ps","item":"parseFormat~item","item.prelit":"parseFormat~item.prelit","fi":"parseFormat~fi","fe":"parseFormat~fe","item.format":"parseFormat~item.format","pf":"parseFormat~pf","sn":"parseFormat~sn","m":"parseFormat~m","ni":"parseFormat~ni","pd":"parseFormat~pd","item.argProp":"parseFormat~item.argProp","item.argOrdinal":"parseFormat~item.argOrdinal"}},"description":"Support for the `formatV` operation.\n\nParses the format template into parsed items\n\nnew format form is \"literal $(fmt) or $2(fmt) or $name(fmt)\"","access":"private","name":"parseFormat","longname":"parseFormat","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Applies the values to the corresponding formats\n*\n* @param formatter\n* @param items\n* @param args\n*\n* @private\n*/","meta":{"range":[2692,3535],"filename":"TemplateFormatter.js","lineno":95,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100007908","name":"applyItems","type":"FunctionDeclaration","paramnames":["formatter","items","args"]},"vars":{"out":"applyItems~out","i":"applyItems~i","item":"applyItems~item","n":"applyItems~n","v":"applyItems~v","item.format":"applyItems~item.format","formed":"applyItems~formed"}},"description":"Applies the values to the corresponding formats","params":[{"name":"formatter"},{"name":"items"},{"name":"args"}],"access":"private","name":"applyItems","longname":"applyItems","kind":"function","scope":"global"},{"comment":"/**\n* Find the Timezone entry that matches the string given\n* which detail is in effect is not provided by this API\n* To do that requires recording and checking the rules for switch-over date/times\n* and would require us to pass in the date as well, so it could be tested against the rule.\n*\n* @param {string} tzString\n* @return {TimezoneEntry[]} array of entries that match this string\n*\n* @private\n*/","meta":{"range":[112326,114010],"filename":"Timezone.js","lineno":4580,"columnno":0,"path":"/build/src/format","code":{"id":"astnode100015115","name":"findTimezone","type":"FunctionDeclaration","paramnames":["tzString"]},"vars":{"found":"findTimezone~found","tzString":"findTimezone~tzString","tzAbbr":"findTimezone~tzAbbr","off":"findTimezone~off","":null}},"description":"Find the Timezone entry that matches the string given\nwhich detail is in effect is not provided by this API\nTo do that requires recording and checking the rules for switch-over date/times\nand would require us to pass in the date as well, so it could be tested against the rule.","params":[{"type":{"names":["string"]},"name":"tzString"}],"returns":[{"type":{"names":["Array.<TimezoneEntry>"]},"description":"array of entries that match this string"}],"access":"private","name":"findTimezone","longname":"findTimezone","kind":"function","scope":"global"},{"comment":"/**\n* Attaches a format handler to the general Formatter choices\n* May be used to create a unique `IFormatHandler` instance as a new named type\n* @param type\n* @param handler\n*\n* @example\n*      class MyFoobarFormatter extends IFormatHandler) {\n*          format(specParts:SpecParts, value:any):string {\n*              return 'FUBAR!'\n*          }\n*      }\n*      registerFormatHandler('foobar', MyFoobarFormatter)\n*/","meta":{"range":[1764,1853],"filename":"Formatter.js","lineno":46,"columnno":0,"path":"/build/src","code":{"id":"astnode100015558","name":"registerFormatHandler","type":"FunctionDeclaration","paramnames":["type","handler"]},"vars":{"registeredHandlers[undefined]":null}},"description":"Attaches a format handler to the general Formatter choices\nMay be used to create a unique `IFormatHandler` instance as a new named type","params":[{"name":"type"},{"name":"handler"}],"examples":["class MyFoobarFormatter extends IFormatHandler) {\n         format(specParts:SpecParts, value:any):string {\n             return 'FUBAR!'\n         }\n     }\n     registerFormatHandler('foobar', MyFoobarFormatter)"],"name":"registerFormatHandler","longname":"registerFormatHandler","kind":"function","scope":"global"},{"comment":"/**\n* The primary export of the gen-format module: The `Formatter` operation (sometimes `F` as shorthand)\n* is represented by this function\n*\n* _describe specification format semantics here, and type identification_\n*\n* @param spec The format specifier string.\n* @param value THe value to be formatted\n*\n* @example\n*      import F from 'gen-format\n*\n*      console.log( F('date|full', 'now') )\n*/","meta":{"range":[2319,2617],"filename":"Formatter.js","lineno":64,"columnno":0,"path":"/build/src","code":{"id":"astnode100015575","name":"formatFactory","type":"FunctionDeclaration","paramnames":["spec","value"]},"vars":{"specParts":"formatFactory~specParts","handler":"formatFactory~handler"}},"description":"The primary export of the gen-format module: The `Formatter` operation (sometimes `F` as shorthand)\nis represented by this function\n\n_describe specification format semantics here, and type identification_","params":[{"description":"The format specifier string.","name":"spec"},{"description":"THe value to be formatted","name":"value"}],"examples":["import F from 'gen-format\n\n     console.log( F('date|full', 'now') )"],"name":"formatFactory","longname":"formatFactory","kind":"function","scope":"global"},{"comment":"/**\n* Error thrown for a specified type that does not exist\n*\n* @param message\n* @constructor\n*/","meta":{"range":[2753,3181],"filename":"Formatter.js","lineno":79,"columnno":0,"path":"/build/src","code":{"id":"astnode100015621","name":"UnknownFormatType","type":"FunctionDeclaration","paramnames":["message"]},"vars":{"UnknownFormatType":"UnknownFormatType~UnknownFormatType","":null}},"description":"Error thrown for a specified type that does not exist","params":[{"name":"message"}],"kind":"class","name":"UnknownFormatType","longname":"UnknownFormatType","scope":"global"},{"comment":"/**\n* Error thrown for the wrong type of value passed to a handler\n*\n* @param message\n* @constructor\n*/","meta":{"range":[3338,3794],"filename":"Formatter.js","lineno":98,"columnno":0,"path":"/build/src","code":{"id":"astnode100015673","name":"IncompatibleValueType","type":"FunctionDeclaration","paramnames":["message"]},"vars":{"IncompatibleValueType":"IncompatibleValueType~IncompatibleValueType","":null}},"description":"Error thrown for the wrong type of value passed to a handler","params":[{"name":"message"}],"kind":"class","name":"IncompatibleValueType","longname":"IncompatibleValueType","scope":"global"},{"comment":"/**\n* Error thrown for a syntax error in the format specifier\n*\n* @param message\n* @constructor\n*/","meta":{"range":[3954,4389],"filename":"Formatter.js","lineno":117,"columnno":0,"path":"/build/src","code":{"id":"astnode100015725","name":"BadFormatSpecifier","type":"FunctionDeclaration","paramnames":["message"]},"vars":{"BadFormatSpecifier":"BadFormatSpecifier~BadFormatSpecifier","":null}},"description":"Error thrown for a syntax error in the format specifier","params":[{"name":"message"}],"kind":"class","name":"BadFormatSpecifier","longname":"BadFormatSpecifier","scope":"global"},{"comment":"/**\n* Parses the format specifier into SpecParts object for processing\n* @param str\n*\n* @private\n*/","meta":{"range":[4544,6379],"filename":"Formatter.js","lineno":136,"columnno":0,"path":"/build/src","code":{"id":"astnode100015777","name":"decodeSpec","type":"FunctionDeclaration","paramnames":["str"]},"vars":{"fi":"decodeSpec~fi","hi":"decodeSpec~hi","li":"decodeSpec~li","di":"decodeSpec~di","ci":"decodeSpec~ci","specParts":"decodeSpec~specParts","specParts.type":"decodeSpec~specParts.type","te":"decodeSpec~te","he":"decodeSpec~he","specParts.hints":"decodeSpec~specParts.hints","le":"decodeSpec~le","specParts.locale":"decodeSpec~specParts.locale","fe":"decodeSpec~fe","specParts.format":"decodeSpec~specParts.format"}},"description":"Parses the format specifier into SpecParts object for processing","params":[{"name":"str"}],"access":"private","name":"decodeSpec","longname":"decodeSpec","kind":"function","scope":"global"},{"comment":"/**\n* Use a format template string and passed arguments to create\n* a formatted output\n*\n* @param fmt The first parameter is a string that defines the format template\n* @param args Subsequent arguments represent the value sources that are represented\n*\n* @example\n*\n*      import {formatV} from 'gen-format'\n*\n*      formatV(\"Pi day, $(date|MMM DD} honors the value Pi which is $(1.2)\", '2021-03-14Z', Math.PI)\n*/","meta":{"range":[6871,7136],"filename":"Formatter.js","lineno":211,"columnno":0,"path":"/build/src","code":{"id":"astnode100016101","name":"formatV","type":"FunctionDeclaration","paramnames":["fmt"]},"vars":{"args":"formatV~args","_i":"formatV~_i","args[undefined]":"formatV~args.undefined]","items":"formatV~items"}},"description":"Use a format template string and passed arguments to create\na formatted output","params":[{"description":"The first parameter is a string that defines the format template","name":"fmt"},{"description":"Subsequent arguments represent the value sources that are represented","name":"args"}],"examples":["import {formatV} from 'gen-format'\n\n     formatV(\"Pi day, $(date|MMM DD} honors the value Pi which is $(1.2)\", '2021-03-14Z', Math.PI)"],"name":"formatV","longname":"formatV","kind":"function","scope":"global"}]}